openapi: 3.0.0
info:
  title: With-Hono API Example
  version: v1
tags: []
paths:
  /categories:
    get:
      operationId: Categories_list
      summary: List categories
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: string
            default: '20'
          explode: false
        - name: offset
          in: query
          required: false
          schema:
            type: string
            default: '0'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - limit
                  - offset
                  - total
                  - items
                properties:
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
                  total:
                    type: integer
                    format: int32
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Category'
        '400':
          description: The server could not understand the request due to invalid syntax.
    post:
      operationId: Categories_create
      summary: Create category
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Category'
        '400':
          description: The server could not understand the request due to invalid syntax.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CategoryCreate'
  /categories/{id}:
    get:
      operationId: Categories_get
      summary: get category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Category'
        '404':
          description: The server cannot find the requested resource.
    patch:
      operationId: Categories_update
      summary: Edit category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Category'
        '400':
          description: The server could not understand the request due to invalid syntax.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CategoryUpdate'
    delete:
      operationId: Categories_delete
      summary: Delete category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '400':
          description: The server could not understand the request due to invalid syntax.
  /posts:
    get:
      operationId: Posts_list
      summary: List posts
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: string
            default: '20'
          explode: false
        - name: offset
          in: query
          required: false
          schema:
            type: string
            default: '0'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - limit
                  - offset
                  - total
                  - items
                properties:
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
                  total:
                    type: integer
                    format: int32
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Post'
        '400':
          description: The server could not understand the request due to invalid syntax.
    post:
      operationId: Posts_create
      summary: Create post
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Post'
        '400':
          description: The server could not understand the request due to invalid syntax.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.PostCreate'
  /posts/{id}:
    get:
      operationId: Posts_get
      summary: get post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Post'
        '404':
          description: The server cannot find the requested resource.
    patch:
      operationId: Posts_update
      summary: Edit post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Post'
        '400':
          description: The server could not understand the request due to invalid syntax.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.PostUpdate'
    delete:
      operationId: Posts_delete
      summary: Delete post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '400':
          description: The server could not understand the request due to invalid syntax.
  /users:
    get:
      operationId: Users_list
      summary: List users
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: string
            default: '20'
          explode: false
        - name: offset
          in: query
          required: false
          schema:
            type: string
            default: '0'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - limit
                  - offset
                  - total
                  - items
                properties:
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
                  total:
                    type: integer
                    format: int32
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.User'
        '400':
          description: The server could not understand the request due to invalid syntax.
    post:
      operationId: Users_create
      summary: Create user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.User'
        '400':
          description: The server could not understand the request due to invalid syntax.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UserCreate'
  /users/{id}:
    get:
      operationId: Users_get
      summary: get user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.User'
        '404':
          description: The server cannot find the requested resource.
    patch:
      operationId: Users_update
      summary: Edit user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.User'
        '400':
          description: The server could not understand the request due to invalid syntax.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UserUpdate'
    delete:
      operationId: Users_delete
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Utils.cuid2'
      responses:
        '204':
          description: There is no content to send for this request, but the headers may be useful.
        '400':
          description: The server could not understand the request due to invalid syntax.
components:
  schemas:
    Models.Category:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Utils.cuid2'
        name:
          type: string
          minLength: 2
          maxLength: 32
          description: category name
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Models.CategoryCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 32
          description: category name
    Models.CategoryCreateItem:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 32
          description: category name
    Models.CategoryUpdate:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Utils.cuid2'
        name:
          type: string
          minLength: 2
          maxLength: 32
          description: category name
    Models.Post:
      type: object
      required:
        - id
        - title
        - body
        - categories
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Utils.cuid2'
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
          description: Markdown formatted string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Models.Category'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Models.PostCreate:
      type: object
      required:
        - title
        - body
        - categories
      properties:
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
          description: Markdown formatted string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Models.CategoryCreateItem'
    Models.PostCreateItem:
      type: object
      required:
        - title
        - body
        - categories
      properties:
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
          description: Markdown formatted string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Models.CategoryCreateItem'
    Models.PostUpdate:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Utils.cuid2'
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
          description: Markdown formatted string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Models.Category'
    Models.User:
      type: object
      required:
        - id
        - name
        - email
        - age
        - posts
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Utils.cuid2'
        name:
          type: string
          minLength: 2
          maxLength: 32
          description: username
        email:
          type: string
          format: email
        age:
          type: integer
          format: int16
          minimum: 18
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Models.Post'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Models.UserCreate:
      type: object
      required:
        - name
        - email
        - age
        - posts
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 32
          description: username
        email:
          type: string
          format: email
        age:
          type: integer
          format: int16
          minimum: 18
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Models.PostCreateItem'
    Models.UserUpdate:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Utils.cuid2'
        name:
          type: string
          minLength: 2
          maxLength: 32
          description: username
        email:
          type: string
          format: email
        age:
          type: integer
          format: int16
          minimum: 18
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Models.Post'
    Utils.cuid2:
      type: string
      format: cuid2
    Versions:
      type: string
      enum:
        - v1
servers:
  - url: ''
    description: Production
    variables: {}
  - url: ''
    description: Development
    variables: {}
